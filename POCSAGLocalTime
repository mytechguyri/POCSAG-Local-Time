#!/usr/bin/env python3
import logging
from datetime import datetime, timedelta
import os
import glob
import time
import subprocess
import requests
from requests.exceptions import RequestException
import configparser

# Define Functions

def SendMessage():
    now = datetime.now()
    localtime = now.strftime('%y%m%d%H%M%S')
    command = ['RemoteCommand', '7642', 'page', '224', f'"YYYYMMDDHHMMSS{localtime}"']
    try:
        result = subprocess.run(command, check=True)
        logger.info(f'Sending message in slot {next_timeslot} to 0000224, type 6, func Alphanumeric: "YYYYMMDDHHMMSS{localtime}"')
    except subprocess.CalledProcessError as e:
        logger.error(f"Unable to send time message, please make sure you have enabled RF Remote Control in Admin->SystemManager")
    return

def GetLogFile ():
    while True:
        date_today = datetime.utcnow().strftime('%Y-%m-%d')
        logfile_today = (f"/var/log/pi-star/DAPNETGateway-{date_today}.log")
        if os.path.exists(logfile_today):
            if logger.handlers:
                logger.removeHandler(logger.handlers[0])
            break
        else:
            time.sleep(30)
    handler = logging.FileHandler(logfile_today)
    formatter = logging.Formatter('M: %(asctime)s.%(msecs)03d %(message)s by %(name)s',"%Y-%m-%d %H:%M:%S")
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return

def GetTimeslots():
    config = configparser.ConfigParser()
    config.read('/etc/dapnetgateway')
    transmitter = config.get('General', 'Callsign')
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
    }
    url = (f"http://hampager.de:8080/transmitters/{transmitter}")
    while True:
        response = None
        try:
            response = requests.get(url, headers=headers, timeout=20)
            response.raise_for_status()
        except (RequestException, Exception) as e:
            if response:
                errormsg = json.loads(response.text)
                e_n = errormsg.get('name')
                e_m = errormsg.get('message')
                logger.error(f"Failed to connect to {url}:  {response.status_code} {e_n} {e_m}, retrying...")
            else:
                logger.error(f"An unexpected error occured: {str(e)}, retrying...")
            time.sleep(60)
        data = response.json()
        timeslot = data["timeSlot"]
        if timeslot != hex_string:
            logger.info(f"Got timeslots {timeslot} from {url} for Transmitter ID {transmitter}")
        return timeslot

def calculate_timeslots(hex_string):
    timeslots = []
    for i in range(0, len(hex_string)):
        timeslot = int(hex_string[i], 16)
        timeslots.append((timeslot, calculate_timeslot_time(timeslot)))
    return timeslots

def calculate_timeslot_time(timeslot):
    now = time.time()  # current time in seconds since the epoch
    decis = now * 10  # convert to deciseconds
    current_slot = int((decis // 64) % 16)
    block_start = decis - (decis % 1024)  # start of the current block
    if timeslot < current_slot:
        block_start += 1024  # next block
    slot_start = block_start + timeslot * 64
    slot_time = datetime.utcfromtimestamp(slot_start / 10)
    return slot_time

# Setup logging

logger = logging.getLogger('POCSAGLocalTime')
GetLogFile()
logger.setLevel(logging.DEBUG)
logging.Formatter.converter = time.gmtime
hex_string = None
# Main Loop
while True:
    try:
        GetLogFile()
        hex_string = GetTimeslots()
        if hex_string:
            timeslots = calculate_timeslots(hex_string)
            timeslots.sort(key=lambda x: x[1])
            next_timeslot, next_timeslot_time = timeslots[0]
            while datetime.utcnow() < next_timeslot_time:
                time.sleep(1)
            SendMessage()
    except Exception as e:
        logger.error(f"An unexpected error occured: {str(e)}")        
    time.sleep(4 * 60)
